/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: langid.proto */

#ifndef PROTOBUF_C_langid_2eproto__INCLUDED
#define PROTOBUF_C_langid_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Langid__LanguageIdentifier Langid__LanguageIdentifier;


/* --- enums --- */


/* --- messages --- */

struct  _Langid__LanguageIdentifier
{
  ProtobufCMessage base;
  int32_t num_feats;
  int32_t num_langs;
  int32_t num_states;
  /*
   * Tokenizer
   */
  size_t n_tk_nextmove;
  int32_t *tk_nextmove;
  size_t n_tk_output_c;
  int32_t *tk_output_c;
  size_t n_tk_output_s;
  int32_t *tk_output_s;
  size_t n_tk_output;
  int32_t *tk_output;
  /*
   * Linear Classifier Parameters
   */
  size_t n_nb_pc;
  double *nb_pc;
  size_t n_nb_ptc;
  double *nb_ptc;
  /*
   * Class Labels
   */
  size_t n_nb_classes;
  char **nb_classes;
};
#define LANGID__LANGUAGE_IDENTIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&langid__language_identifier__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* Langid__LanguageIdentifier methods */
void   langid__language_identifier__init
                     (Langid__LanguageIdentifier         *message);
size_t langid__language_identifier__get_packed_size
                     (const Langid__LanguageIdentifier   *message);
size_t langid__language_identifier__pack
                     (const Langid__LanguageIdentifier   *message,
                      uint8_t             *out);
size_t langid__language_identifier__pack_to_buffer
                     (const Langid__LanguageIdentifier   *message,
                      ProtobufCBuffer     *buffer);
Langid__LanguageIdentifier *
       langid__language_identifier__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   langid__language_identifier__free_unpacked
                     (Langid__LanguageIdentifier *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Langid__LanguageIdentifier_Closure)
                 (const Langid__LanguageIdentifier *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor langid__language_identifier__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_langid_2eproto__INCLUDED */
